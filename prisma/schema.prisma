// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

// new schema
model UsersRoles {
  id            Int             @id @default(autoincrement())
  name          String
  code          String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  projectsUsers ProjectsUsers[]
}

model Users {
  id                      Int                  @id @default(autoincrement())
  cuid                    String               @unique @default(cuid())
  createdAt               DateTime             @default(now())
  updatedAt               DateTime             @updatedAt
  firstName               String
  lastName                String
  profilePicture          String?
  email                   String               @unique
  password                String
  resetToken              String?              @unique
  resetTokenExpiry        String?
  isActive                Boolean              @default(true)
  isVerified              Boolean              @default(false)
  verificationToken       String?              @unique
  verificationTokenExpiry String?
  projectsUsers           ProjectsUsers[]
  organizations           Organizations[]
  projects                Projects[]
  organizationsUsers      OrganizationsUsers[]
  createdLogs             Changelogs[]         @relation("CreatedLogs")
  updatedLogs             Changelogs[]         @relation("UpdatedLogs")
  feedbackPosts           FeedbackPosts[]
  upvotedFeedbacksByUsers FeedbackPostVotes[]
}

model Organizations {
  id                 Int                  @id @default(autoincrement())
  cuid               String               @unique @default(cuid())
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  users              Users?               @relation(fields: [createdById], references: [id])
  createdById        Int?
  name               String
  organizationsUsers OrganizationsUsers[]
  releaseTags        ReleaseTags[]
  releaseCategories  ReleaseCategories[]
  projects           Projects[]
}

model OrganizationsUsers {
  organizations   Organizations @relation(fields: [organizationsId], references: [id])
  organizationsId Int
  users           Users         @relation(fields: [usersId], references: [id])
  usersId         Int
  isActive        Boolean       @default(false)

  @@id([organizationsId, usersId])
}

model Projects {
  id              Int              @id @default(autoincrement())
  cuid            String           @unique @default(cuid())
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  name            String?
  slug            String           @unique
  projectImgUrl   String?
  logs            Changelogs[]
  Users           Users?           @relation(fields: [createdById], references: [id])
  createdById     Int?
  organizations   Organizations?   @relation(fields: [organizationsId], references: [id])
  organizationsId Int?
  projectsUsers   ProjectsUsers[]
  feedbackBoards  FeedbackBoards[]
}

model ProjectsUsers {
  projects   Projects   @relation(fields: [projectsId], references: [id])
  projectsId Int
  users      Users      @relation(fields: [usersId], references: [id])
  usersId    Int
  role       UsersRoles @relation(fields: [roleId], references: [id])
  roleId     Int
  isActive   Boolean    @default(false)

  @@id([usersId, projectsId, roleId])
}

model Changelogs {
  id                Int                          @id @default(autoincrement())
  cuid              String                       @unique @default(cuid())
  createdAt         DateTime                     @default(now())
  updatedAt         DateTime                     @updatedAt
  title             String
  description       String
  releaseVersion    String
  releaseCategories ChangelogReleaseCategories[]
  releaseTags       ChangelogReleaseTags[]
  projects          Projects?                    @relation(fields: [projectsId], references: [id])
  projectsId        Int?
  scheduledTime     DateTime?
  status            String
  createdBy         Users                        @relation("CreatedLogs", fields: [createdById], references: [id])
  createdById       Int
  updatedBy         Users                        @relation("UpdatedLogs", fields: [updatedById], references: [id])
  updatedById       Int
  deletedAt         DateTime?
  archivedAt        DateTime?
}

model ReleaseTags {
  id              Int                       @id @default(autoincrement())
  cuid            String                    @unique @default(cuid())
  name            String
  code            String
  createdAt       DateTime                  @default(now())
  updatedAt       DateTime                  @updatedAt
  organizations   Organizations?            @relation(fields: [organizationsId], references: [id])
  organizationsId Int
  logs            ChangelogReleaseTags[]
  feedbackPosts   FeedbackPostReleaseTags[]
}

model ChangelogReleaseTags {
  log          Changelogs  @relation(fields: [logId], references: [id])
  logId        Int
  releaseTag   ReleaseTags @relation(fields: [releaseTagId], references: [id])
  releaseTagId Int

  @@id([logId, releaseTagId])
}

model ReleaseCategories {
  id              Int                          @id @default(autoincrement())
  cuid            String                       @unique @default(cuid())
  name            String
  code            String
  createdAt       DateTime                     @default(now())
  updatedAt       DateTime                     @updatedAt
  organizations   Organizations?               @relation(fields: [organizationsId], references: [id])
  organizationsId Int
  logs            ChangelogReleaseCategories[]
}

model ChangelogReleaseCategories {
  log               Changelogs        @relation(fields: [logId], references: [id])
  logId             Int
  releaseCategory   ReleaseCategories @relation(fields: [releaseCategoryId], references: [id])
  releaseCategoryId Int

  @@id([logId, releaseCategoryId])
}

model FeedbackPosts {
  id                Int                       @id @default(autoincrement())
  cuid              String                    @unique @default(cuid())
  createdAt         DateTime                  @default(now())
  updatedAt         DateTime                  @updatedAt
  title             String
  description       String
  status            FeedbackStatus
  releaseETA        DateTime?
  createdBy         Users?                    @relation(fields: [createdById], references: [id])
  createdById       Int?
  deletedAt         DateTime?
  feedbackBoards    FeedbackBoards?           @relation(fields: [feedbackBoardsId], references: [id])
  feedbackBoardsId  Int?
  visibilityStatus  VisibilityStatus          @default(private)
  releaseTags       FeedbackPostReleaseTags[]
  feedbackPostVotes FeedbackPostVotes[]
}

model FeedbackBoards {
  id            Int             @id @default(autoincrement())
  cuid          String          @unique @default(cuid())
  name          String
  isDefault     Boolean         @default(false)
  projects      Projects?       @relation(fields: [projectsId], references: [id])
  projectsId    Int?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  feedbackPosts FeedbackPosts[]
}

model FeedbackPostReleaseTags {
  feedbackPost   FeedbackPosts @relation(fields: [feedbackPostId], references: [id])
  feedbackPostId Int
  releaseTag     ReleaseTags   @relation(fields: [releaseTagId], references: [id])
  releaseTagId   Int

  @@id([feedbackPostId, releaseTagId])
}

model FeedbackPostVotes {
  feedbackPost   FeedbackPosts @relation(fields: [feedbackPostId], references: [id])
  feedbackPostId Int
  User           Users         @relation(fields: [userId], references: [id])
  userId         Int

  @@id([feedbackPostId, userId])
}

enum FeedbackStatus {
  IN_REVIEW
  PLANNED
  IN_PROGRESS
  COMPLETED
  CLOSED
}

enum VisibilityStatus {
  public
  private
}
